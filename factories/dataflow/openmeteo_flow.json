{
	"name": "openmeteo_flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "openmeteo_reponse_JSON",
						"type": "DatasetReference"
					},
					"name": "openmeteoCloudcover"
				},
				{
					"dataset": {
						"referenceName": "openmeteo_reponse_JSON",
						"type": "DatasetReference"
					},
					"name": "openmeteotime"
				},
				{
					"dataset": {
						"referenceName": "openmeteo_reponse_JSON",
						"type": "DatasetReference"
					},
					"name": "openmeteoprecipitation"
				},
				{
					"dataset": {
						"referenceName": "openmeteo_reponse_JSON",
						"type": "DatasetReference"
					},
					"name": "openmeteodni"
				},
				{
					"dataset": {
						"referenceName": "openmeteo_reponse_JSON",
						"type": "DatasetReference"
					},
					"name": "openmeteotemperature"
				},
				{
					"dataset": {
						"referenceName": "openmeteo_reponse_JSON",
						"type": "DatasetReference"
					},
					"name": "openmeteowindspeed"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TESTcloudcover",
						"type": "DatasetReference"
					},
					"name": "sinkCloudcover",
					"description": "Export data to blob"
				},
				{
					"dataset": {
						"referenceName": "TESTcloudcover",
						"type": "DatasetReference"
					},
					"name": "sinkTime"
				},
				{
					"dataset": {
						"referenceName": "TESTcloudcover",
						"type": "DatasetReference"
					},
					"name": "sinkPrecipitation"
				},
				{
					"dataset": {
						"referenceName": "TESTcloudcover",
						"type": "DatasetReference"
					},
					"name": "sinkdni"
				},
				{
					"dataset": {
						"referenceName": "TESTcloudcover",
						"type": "DatasetReference"
					},
					"name": "sinktemperature"
				},
				{
					"dataset": {
						"referenceName": "TESTcloudcover",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "selectCloudcover"
				},
				{
					"name": "flattenCloudcover"
				},
				{
					"name": "selectTime"
				},
				{
					"name": "flattenTime"
				},
				{
					"name": "selectPrecipitation"
				},
				{
					"name": "flattenPrecipitation"
				},
				{
					"name": "selectdni"
				},
				{
					"name": "flattendni"
				},
				{
					"name": "selecttemperature"
				},
				{
					"name": "flattentemperature"
				},
				{
					"name": "select1"
				},
				{
					"name": "flatten1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          elevation as double,",
				"          generationtime_ms as double,",
				"          hourly as (cloudcover as short[], direct_normal_irradiance as double[], precipitation as double[], temperature_2m as double[], time as string[], windspeed_10m as double[]),",
				"          hourly_units as (cloudcover as string, direct_normal_irradiance as string, precipitation as string, temperature_2m as string, time as string, windspeed_10m as string),",
				"          latitude as double,",
				"          longitude as double,",
				"          timezone as string,",
				"          timezone_abbreviation as string,",
				"          utc_offset_seconds as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Gainesville_*.json']) ~> openmeteoCloudcover",
				"source(output(",
				"          elevation as double,",
				"          generationtime_ms as double,",
				"          hourly as (cloudcover as short[], direct_normal_irradiance as double[], precipitation as double[], temperature_2m as double[], time as string[], windspeed_10m as double[]),",
				"          hourly_units as (cloudcover as string, direct_normal_irradiance as string, precipitation as string, temperature_2m as string, time as string, windspeed_10m as string),",
				"          latitude as double,",
				"          longitude as double,",
				"          timezone as string,",
				"          timezone_abbreviation as string,",
				"          utc_offset_seconds as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Gainesville_*.json']) ~> openmeteotime",
				"source(output(",
				"          elevation as double,",
				"          generationtime_ms as double,",
				"          hourly as (cloudcover as short[], direct_normal_irradiance as double[], precipitation as double[], temperature_2m as double[], time as string[], windspeed_10m as double[]),",
				"          hourly_units as (cloudcover as string, direct_normal_irradiance as string, precipitation as string, temperature_2m as string, time as string, windspeed_10m as string),",
				"          latitude as double,",
				"          longitude as double,",
				"          timezone as string,",
				"          timezone_abbreviation as string,",
				"          utc_offset_seconds as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Gainesville_*.json']) ~> openmeteoprecipitation",
				"source(output(",
				"          elevation as double,",
				"          generationtime_ms as double,",
				"          hourly as (cloudcover as short[], direct_normal_irradiance as double[], precipitation as double[], temperature_2m as double[], time as string[], windspeed_10m as double[]),",
				"          hourly_units as (cloudcover as string, direct_normal_irradiance as string, precipitation as string, temperature_2m as string, time as string, windspeed_10m as string),",
				"          latitude as double,",
				"          longitude as double,",
				"          timezone as string,",
				"          timezone_abbreviation as string,",
				"          utc_offset_seconds as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Gainesville_*.json']) ~> openmeteodni",
				"source(output(",
				"          elevation as double,",
				"          generationtime_ms as double,",
				"          hourly as (cloudcover as short[], direct_normal_irradiance as double[], precipitation as double[], temperature_2m as double[], time as string[], windspeed_10m as double[]),",
				"          hourly_units as (cloudcover as string, direct_normal_irradiance as string, precipitation as string, temperature_2m as string, time as string, windspeed_10m as string),",
				"          latitude as double,",
				"          longitude as double,",
				"          timezone as string,",
				"          timezone_abbreviation as string,",
				"          utc_offset_seconds as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Gainesville_*.json']) ~> openmeteotemperature",
				"source(output(",
				"          elevation as double,",
				"          generationtime_ms as double,",
				"          hourly as (cloudcover as short[], direct_normal_irradiance as double[], precipitation as double[], temperature_2m as double[], time as string[], windspeed_10m as double[]),",
				"          hourly_units as (cloudcover as string, direct_normal_irradiance as string, precipitation as string, temperature_2m as string, time as string, windspeed_10m as string),",
				"          latitude as double,",
				"          longitude as double,",
				"          timezone as string,",
				"          timezone_abbreviation as string,",
				"          utc_offset_seconds as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Gainesville_*.json']) ~> openmeteowindspeed",
				"openmeteoCloudcover select(mapColumn(",
				"          cloudcover = hourly.cloudcover",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCloudcover",
				"selectCloudcover foldDown(unroll(cloudcover),",
				"     mapColumn(",
				"          cloudcover",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenCloudcover",
				"openmeteotime select(mapColumn(",
				"          time = hourly.time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTime",
				"selectTime foldDown(unroll(time, time),",
				"     mapColumn(",
				"          time",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenTime",
				"openmeteoprecipitation select(mapColumn(",
				"          precipitation = hourly.precipitation",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPrecipitation",
				"selectPrecipitation foldDown(unroll(precipitation, precipitation),",
				"     mapColumn(",
				"          precipitation",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenPrecipitation",
				"openmeteodni select(mapColumn(",
				"          dni = hourly.direct_normal_irradiance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdni",
				"selectdni foldDown(unroll(dni, dni),",
				"     mapColumn(",
				"          hourly = dni",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattendni",
				"openmeteotemperature select(mapColumn(",
				"          temperature = hourly.temperature_2m",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selecttemperature",
				"selecttemperature foldDown(unroll(temperature, temperature),",
				"     mapColumn(",
				"          temperature",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattentemperature",
				"openmeteowindspeed select(mapColumn(",
				"          windspeed = hourly.windspeed_10m",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 foldDown(unroll(windspeed, windspeed),",
				"     mapColumn(",
				"          windspeed",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flattenCloudcover sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkCloudcover",
				"flattenTime sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkTime",
				"flattenPrecipitation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkPrecipitation",
				"flattendni sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkdni",
				"flattentemperature sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinktemperature",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}