{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "openmeteo_reponse_JSON",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "staging",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "selectCloudcover"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "window2"
				},
				{
					"name": "select10"
				},
				{
					"name": "filter2"
				},
				{
					"name": "selectTime"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "rank2"
				},
				{
					"name": "join1"
				},
				{
					"name": "selectdni"
				},
				{
					"name": "cast2"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "derivedColumn9"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "window3"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter3"
				},
				{
					"name": "join2"
				},
				{
					"name": "selectfinaldni"
				},
				{
					"name": "selectfinalcloudcover"
				},
				{
					"name": "join3"
				},
				{
					"name": "select11"
				}
			],
			"scriptLines": [
				"source(output(",
				"          elevation as double,",
				"          generationtime_ms as double,",
				"          hourly as (cloudcover as short[], direct_normal_irradiance as double[], precipitation as double[], temperature_2m as double[], time as string[], windspeed_10m as double[]),",
				"          hourly_units as (cloudcover as string, direct_normal_irradiance as string, precipitation as string, temperature_2m as string, time as string, windspeed_10m as string),",
				"          latitude as double,",
				"          longitude as double,",
				"          timezone as string,",
				"          timezone_abbreviation as string,",
				"          utc_offset_seconds as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Gainesville_*.json']) ~> source1",
				"source1 select(mapColumn(",
				"          cloudcover = hourly.cloudcover,",
				"          time = hourly.time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCloudcover",
				"cast1 derive(flattened = flatten([cloudcover, time])) ~> derivedColumn1",
				"derivedColumn1 foldDown(unroll(flattened, flattened),",
				"     mapColumn(",
				"          flattened",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"selectCloudcover cast(output(",
				"          cloudcover as string[]",
				"     ),",
				"     errors: true) ~> cast1",
				"flatten1 derive(times = toDate(toString(flattened)),",
				"          cloudcover = toInteger(flattened)) ~> derivedColumn5",
				"derivedColumn5 derive(time_null = iif(isNull(times), 1, 0)) ~> derivedColumn6",
				"derivedColumn6 window(over(time_null),",
				"     asc(times, true),",
				"     endRowOffset: 0L,",
				"     index = countIf(time_null==1)) ~> window2",
				"window2 select(mapColumn(",
				"          cloudcover,",
				"          index",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"select10 filter(not(isNull(cloudcover))) ~> filter2",
				"source1 select(mapColumn(",
				"          time = hourly.time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTime",
				"selectTime foldDown(unroll(time),",
				"     mapColumn(",
				"          time",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 rank(asc(time, true),",
				"     output(time_rank as long)) ~> rank2",
				"filter2, rank2 join(index == time_rank,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"source1 select(mapColumn(",
				"          time = hourly.time,",
				"          direct_normal_irradiance = hourly.direct_normal_irradiance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdni",
				"selectdni cast(output(",
				"          direct_normal_irradiance as string[]",
				"     ),",
				"     errors: true) ~> cast2",
				"cast2 derive(flattened = flatten([time, direct_normal_irradiance])) ~> derivedColumn8",
				"derivedColumn8 foldDown(unroll(flattened),",
				"     mapColumn(",
				"          flattened",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"flatten3 derive(times = toDate(toString(flattened)),",
				"          dni = toDouble(flattened)) ~> derivedColumn9",
				"derivedColumn9 derive(time_null = iif(isNull(times),1,0)) ~> derivedColumn10",
				"derivedColumn10 window(over(time_null),",
				"     asc(times, true),",
				"     endRowOffset: 0L,",
				"     index = countIf(time_null==1)) ~> window3",
				"window3 select(mapColumn(",
				"          dni,",
				"          index",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(not(isNull(dni))) ~> filter3",
				"filter3, rank2 join(index == time_rank,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          dni,",
				"          time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfinaldni",
				"join1 select(mapColumn(",
				"          cloudcover,",
				"          time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfinalcloudcover",
				"selectfinaldni, selectfinalcloudcover join(selectfinaldni@time == selectfinalcloudcover@time,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          time = selectfinaldni@time,",
				"          dni,",
				"          cloudcover",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"select11 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}